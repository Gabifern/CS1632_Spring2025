package edu.pitt.cs;

import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.generator.*;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import static org.junit.Assume.assumeThat;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

@RunWith(JUnitQuickcheck.class)
public class QuickCheckTest {

	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10 and x <= 10.
	 * Execution steps: Call IntegerOps.square(x).
	 * Invariants: [Fill in]
	 * square(x) >= 0
	 * square(x) == x*x
	 * square(x) == square(-x)
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 */
	
	// TODO: Write @Property testSquare using invariants of your own.
	//result is non-negative, result equals x*x, symmetry, that square(x) == square(x)
	@Property
	public void testSquare(@InRange(minInt = -10, maxInt = 10) int x) {
		int result = IntegerOps.square(x);
	
		// Invariant 1: Result is non-negative
		assertThat(result, greaterThanOrEqualTo(0));
	
		// Invariant 2: Result equals x * x
		assertEquals(x * x, result);
	
		// Invariant 3: Symmetry
		assertEquals(IntegerOps.square(-x), result);
	}
	
	
	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10, x <= 10, y >= -10, and y <= 10.
	 * Execution steps: Call IntegerOps.add(x, y).
	 * Invariants: [Fill in]
	 * add(x,y) == x+y
	 * add(x,y) == add(y,x)
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 * @param y int generated by QuickCheck
	 */
	
	// TODO: Write @Property testAddInRange using invariants of your own.
	//result equals x+y, addition is commutative add(x,y) == add(y,x)
	@Property
	public void testAddInRange(@InRange(minInt = -10, maxInt = 10) int x,
							   @InRange(minInt = -10, maxInt = 10) int y) {
		int result = IntegerOps.add(x, y);
	
		// Invariant 1: Result equals x + y
		assertEquals(x + y, result);
	
		// Invariant 2: Commutative
		assertEquals(IntegerOps.add(y, x), result);
	}
	

	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10, x <= 10, y >= -10, y <= 10, AND x > -y.
	 * Execution steps: Call IntegerOps.add(x, y).
	 * Invariants: [Fill in]
	 * add(x,y) == x+y
	 * add(x,y) == add(y,x)
	 * x > -y so x+y > 0
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 * @param y int generated by QuickCheck
	 */
	
	// TODO: Write @Property testAddGreaterThan and see if you can find additional invariants with the addition x > -y precondition.
	// Use the assumeThat API to enforce the x > -y precondition.
	//same as above, with x > -y, we know that x+y > 0
	@Property
	public void testAddGreaterThan(@InRange(minInt = -10, maxInt = 10) int x,
                               @InRange(minInt = -10, maxInt = 10) int y) {
		// Precondition: x > -y
		assumeThat(x, greaterThan(-y));

		int result = IntegerOps.add(x, y);

		// Invariant 1: Result equals x + y
		assertEquals(x + y, result);

		// Invariant 2: Commutative
		assertEquals(IntegerOps.add(y, x), result);

		// Invariant 3: With x > -y, x + y must be positive
		assertThat(result, greaterThan(0));
	}


}